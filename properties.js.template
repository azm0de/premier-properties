// Properties Page JavaScript

document.addEventListener('DOMContentLoaded', function() {
    console.log('DOM Content Loaded - Properties page');
    console.log('Google Maps available?', typeof google !== 'undefined');
    initializePropertiesPage();
});

function initializePropertiesPage() {
    setupViewToggle();
    setupPropertyFilters();
    setupPropertySearch();
    setupLoadMore();
    setupPropertyInteractions();
    initializePropertyMap();
}

// View Toggle (Grid/List)
function setupViewToggle() {
    const viewButtons = document.querySelectorAll('.view-btn');
    const propertiesGrid = document.getElementById('properties-grid');

    viewButtons.forEach(button => {
        button.addEventListener('click', function() {
            const view = this.dataset.view;

            // Update active button
            viewButtons.forEach(btn => btn.classList.remove('active'));
            this.classList.add('active');

            // Update grid view
            if (view === 'list') {
                propertiesGrid.classList.add('list-view');
            } else {
                propertiesGrid.classList.remove('list-view');
            }

            // Animate change
            propertiesGrid.style.opacity = '0.7';
            setTimeout(() => {
                propertiesGrid.style.opacity = '1';
            }, 200);
        });
    });
}

// Property Filters
function setupPropertyFilters() {
    const filterSelects = document.querySelectorAll('.filter-group select');
    const searchBtn = document.querySelector('.search-btn');
    const propertyCards = document.querySelectorAll('.property-card');

    function filterProperties() {
        const filters = getActiveFilters();

        // Add loading state
        const propertiesGrid = document.getElementById('properties-grid');
        propertiesGrid.classList.add('loading');

        setTimeout(() => {
            propertyCards.forEach(card => {
                if (matchesFilters(card, filters)) {
                    card.classList.remove('filtered-out');
                    card.classList.add('filtered-in');
                } else {
                    card.classList.add('filtered-out');
                    card.classList.remove('filtered-in');
                }
            });

            propertiesGrid.classList.remove('loading');
            updateResultsCount();
        }, 500);
    }

    function getActiveFilters() {
        return {
            location: document.getElementById('location').value,
            priceRange: document.getElementById('price-range').value,
            bedrooms: document.getElementById('bedrooms').value,
            propertyType: document.getElementById('property-type').value
        };
    }

    function matchesFilters(card, filters) {
        // Location filter
        if (filters.location && !card.dataset.location?.includes(filters.location)) {
            return false;
        }

        // Price range filter
        if (filters.priceRange) {
            const cardPrice = parseInt(card.dataset.price);
            if (!matchesPriceRange(cardPrice, filters.priceRange)) {
                return false;
            }
        }

        // Bedrooms filter
        if (filters.bedrooms) {
            const cardBedrooms = parseInt(card.dataset.bedrooms);
            const minBedrooms = parseInt(filters.bedrooms.replace('+', ''));
            if (cardBedrooms < minBedrooms) {
                return false;
            }
        }

        // Property type filter would go here if data attributes were added

        return true;
    }

    function matchesPriceRange(price, range) {
        switch (range) {
            case '5-10':
                return price >= 5000000 && price <= 10000000;
            case '10-20':
                return price >= 10000000 && price <= 20000000;
            case '20-50':
                return price >= 20000000 && price <= 50000000;
            case '50+':
                return price >= 50000000;
            default:
                return true;
        }
    }

    function updateResultsCount() {
        const visibleCards = document.querySelectorAll('.property-card:not(.filtered-out)');
        const count = visibleCards.length;

        // You could add a results counter here
        console.log(`Showing ${count} properties`);
    }

    // Add change event listeners to all filter selects
    filterSelects.forEach(select => {
        select.addEventListener('change', filterProperties);
    });

    // Search button click
    if (searchBtn) {
        searchBtn.addEventListener('click', function(e) {
            e.preventDefault();
            filterProperties();
        });
    }
}

// Property Search
function setupPropertySearch() {
    // This would integrate with a search API
    // For now, it's handled by the filters
}

// Load More functionality
function setupLoadMore() {
    const loadMoreBtn = document.querySelector('.load-more .btn');

    if (loadMoreBtn) {
        loadMoreBtn.addEventListener('click', function() {
            // Simulate loading more properties
            this.textContent = 'Loading...';
            this.disabled = true;

            setTimeout(() => {
                // In a real app, this would fetch more properties from an API
                this.textContent = 'Load More Properties';
                this.disabled = false;

                // Show message that all properties are loaded
                this.textContent = 'All Properties Loaded';
                this.disabled = true;
            }, 2000);
        });
    }
}

// Property Interactions
function setupPropertyInteractions() {
    const propertyCards = document.querySelectorAll('.property-card');

    propertyCards.forEach(card => {
        // Add hover effect for property images
        const image = card.querySelector('.property-image img');
        if (image) {
            card.addEventListener('mouseenter', function() {
                image.style.transform = 'scale(1.05)';
            });

            card.addEventListener('mouseleave', function() {
                image.style.transform = 'scale(1)';
            });
        }

        // Handle overlay button clicks
        const viewDetailsBtn = card.querySelector('.property-overlay .btn:first-child');
        const scheduleTourBtn = card.querySelector('.property-overlay .btn:last-child');

        if (viewDetailsBtn) {
            viewDetailsBtn.addEventListener('click', function(e) {
                e.preventDefault();
                e.stopPropagation();
                openPropertyDetails(card);
            });
        }

        if (scheduleTourBtn) {
            scheduleTourBtn.addEventListener('click', function(e) {
                e.preventDefault();
                e.stopPropagation();
                scheduleTour(card);
            });
        }

        // Make entire card clickable
        card.addEventListener('click', function() {
            openPropertyDetails(this);
        });
    });
}

// Open property details (mock functionality)
function openPropertyDetails(propertyCard) {
    const propertyTitle = propertyCard.querySelector('h3').textContent;
    const propertyPrice = propertyCard.querySelector('.property-price').textContent;

    // In a real app, this would navigate to a detailed property page
    console.log(`Opening details for: ${propertyTitle} - ${propertyPrice}`);

    // Mock modal or navigation
    alert(`Property Details: ${propertyTitle}\nPrice: ${propertyPrice}\n\nThis would open a detailed property page in a real application.`);
}

// Schedule tour (mock functionality)
function scheduleTour(propertyCard) {
    const propertyTitle = propertyCard.querySelector('h3').textContent;

    // In a real app, this would open a tour scheduling form
    console.log(`Scheduling tour for: ${propertyTitle}`);

    // Mock action
    if (confirm(`Schedule a tour for ${propertyTitle}?\n\nThis would open a scheduling form in a real application.`)) {
        // Redirect to contact page with property info
        window.location.href = 'contact.html';
    }
}

// Property card animation on scroll
if ('IntersectionObserver' in window) {
    const propertyObserver = new IntersectionObserver((entries) => {
        entries.forEach((entry, index) => {
            if (entry.isIntersecting) {
                setTimeout(() => {
                    entry.target.style.opacity = '1';
                    entry.target.style.transform = 'translateY(0)';
                }, index * 100);
                propertyObserver.unobserve(entry.target);
            }
        });
    }, {
        threshold: 0.1,
        rootMargin: '0px 0px -50px 0px'
    });

    // Initially hide property cards for animation
    const propertyCards = document.querySelectorAll('.property-card');
    propertyCards.forEach(card => {
        card.style.opacity = '0';
        card.style.transform = 'translateY(30px)';
        card.style.transition = 'opacity 0.6s ease, transform 0.6s ease';
        propertyObserver.observe(card);
    });
}

// Property comparison functionality (future enhancement)
function setupPropertyComparison() {
    // This would allow users to compare multiple properties
    // Implementation would include:
    // - Checkbox on each property card
    // - Compare button that appears when properties are selected
    // - Comparison table/modal
}

// Property favorites functionality (future enhancement)
function setupPropertyFavorites() {
    // This would allow users to save favorite properties
    // Implementation would include:
    // - Heart icon on each property card
    // - Local storage or user account integration
    // - Favorites page
}

// Google Maps Integration
let googleMap = null;
let googleMapMarkers = [];
let googleMapInfoWindows = [];

// Property locations with full details
const propertyLocations = [
    {
        id: 'beverly-hills',
        name: 'Beverly Hills Office',
        address: '9200 Sunset Boulevard, Beverly Hills, CA 90069',
        phone: '(310) 555-0100',
        hours: {
            weekdays: 'Mon-Fri: 9:00 AM - 6:00 PM',
            weekends: 'Sat-Sun: 10:00 AM - 4:00 PM'
        },
        lat: 34.0736,
        lng: -118.4004
    },
    {
        id: 'manhattan',
        name: 'Manhattan Office',
        address: '350 Fifth Avenue, New York, NY 10118',
        phone: '(212) 555-0200',
        hours: {
            weekdays: 'Mon-Fri: 9:00 AM - 7:00 PM',
            weekends: 'Sat-Sun: 11:00 AM - 5:00 PM'
        },
        lat: 40.7829,
        lng: -73.9654
    },
    {
        id: 'malibu',
        name: 'Malibu Office',
        address: '23755 Malibu Road, Malibu, CA 90265',
        phone: '(310) 555-0300',
        hours: {
            weekdays: 'Mon-Fri: 10:00 AM - 5:00 PM',
            weekends: 'Sat-Sun: 11:00 AM - 3:00 PM'
        },
        lat: 34.0259,
        lng: -118.7798
    },
    {
        id: 'miami',
        name: 'Miami Beach Office',
        address: '1001 Ocean Drive, Miami Beach, FL 33139',
        phone: '(305) 555-0400',
        hours: {
            weekdays: 'Mon-Fri: 9:00 AM - 6:00 PM',
            weekends: 'Sat-Sun: 10:00 AM - 4:00 PM'
        },
        lat: 25.7907,
        lng: -80.1300
    },
    {
        id: 'aspen',
        name: 'Aspen Office',
        address: '205 S Galena Street, Aspen, CO 81611',
        phone: '(970) 555-0500',
        hours: {
            weekdays: 'Mon-Fri: 9:00 AM - 5:00 PM',
            weekends: 'Sat-Sun: 10:00 AM - 3:00 PM'
        },
        lat: 39.1911,
        lng: -106.8175
    }
];

// Load Google Maps API dynamically
function loadGoogleMapsAPI() {
    return new Promise((resolve, reject) => {
        // Check if already loaded
        if (window.google && window.google.maps) {
            console.log('✓ Google Maps API already loaded');
            resolve();
            return;
        }

        // Google Maps API Key (injected during build)
        const apiKey = 'YOUR_GOOGLE_MAPS_API_KEY_HERE';

        console.log('Loading Google Maps API...');

        // Create callback function name
        window.initGoogleMapsCallback = function() {
            console.log('✓ Google Maps API callback fired!');
            console.log('✓ Google object available:', typeof google !== 'undefined');
            console.log('✓ Google.maps available:', typeof google?.maps !== 'undefined');
            delete window.initGoogleMapsCallback;
            resolve();
        };

        // Create script element
        const script = document.createElement('script');
        script.src = `https://maps.googleapis.com/maps/api/js?key=${apiKey}&callback=initGoogleMapsCallback`;
        script.async = true;
        script.defer = true;

        // Error handling
        script.onerror = function(error) {
            console.error('✗ Failed to load Google Maps API script', error);
            reject(new Error('Failed to load Google Maps API'));
        };

        script.onload = function() {
            console.log('✓ Script tag loaded successfully');
        };

        // Add timeout
        const timeout = setTimeout(() => {
            console.error('✗ Google Maps API loading timeout (10 seconds)');
            reject(new Error('Google Maps API loading timeout'));
        }, 15000);

        // Clear timeout on success
        const originalResolve = resolve;
        resolve = function() {
            clearTimeout(timeout);
            originalResolve();
        };

        console.log('Appending Google Maps script...');
        document.head.appendChild(script);
    });
}

// Create custom numbered marker SVG
function createCustomMarker(number) {
    const svg = `
        <svg width="40" height="50" viewBox="0 0 40 50" xmlns="http://www.w3.org/2000/svg">
            <path d="M20 0C8.954 0 0 8.954 0 20c0 14 20 30 20 30s20-16 20-30C40 8.954 31.046 0 20 0z" fill="#ef4444"/>
            <circle cx="20" cy="20" r="12" fill="white"/>
            <text x="20" y="26" font-size="14" font-weight="bold" text-anchor="middle" fill="#ef4444" font-family="Arial, sans-serif">${number}</text>
        </svg>
    `;
    return 'data:image/svg+xml;charset=UTF-8,' + encodeURIComponent(svg);
}

// Create info window content
function createInfoWindowContent(location) {
    return `
        <div style="font-family: 'Montserrat', sans-serif; padding: 10px; min-width: 250px;">
            <h3 style="margin: 0 0 10px 0; color: #1a1a1a; font-size: 1.1rem;">${location.name}</h3>
            <div style="margin-bottom: 8px; color: #666;">
                <strong style="color: #D4AF37;">Address:</strong><br/>
                ${location.address}
            </div>
            <div style="margin-bottom: 8px; color: #666;">
                <strong style="color: #D4AF37;">Phone:</strong> ${location.phone}
            </div>
            <div style="margin-bottom: 12px; color: #666;">
                <strong style="color: #D4AF37;">Hours:</strong><br/>
                ${location.hours.weekdays}<br/>
                ${location.hours.weekends}
            </div>
            <a href="https://www.google.com/maps/dir/?api=1&destination=${location.lat},${location.lng}"
               target="_blank"
               style="display: inline-block; background: #D4AF37; color: white; padding: 8px 16px;
                      text-decoration: none; border-radius: 5px; font-weight: 600;
                      transition: background 0.3s ease;"
               onmouseover="this.style.background='#c5a028'"
               onmouseout="this.style.background='#D4AF37'">
                Get Directions
            </a>
        </div>
    `;
}

// Close all info windows
function closeAllInfoWindows() {
    googleMapInfoWindows.forEach(infoWindow => {
        infoWindow.close();
    });
}

// Initialize Google Maps
function initializePropertyMap() {
    console.log('=== INITIALIZING GOOGLE MAPS ===');

    const mapContainer = document.getElementById('properties-map');
    if (!mapContainer) {
        console.error('✗ Map container not found');
        return;
    }
    console.log('✓ Map container found:', mapContainer);

    // Load Google Maps API
    console.log('Starting API load...');
    loadGoogleMapsAPI()
        .then(() => {
            console.log('✓ API loaded successfully, creating map...');
            createGoogleMap();
        })
        .catch(error => {
            console.error('✗ Error loading Google Maps:', error);
            showMapError(mapContainer);
        });
}

// Create Google Map with markers
function createGoogleMap() {
    console.log('=== CREATING GOOGLE MAP ===');

    const mapContainer = document.getElementById('properties-map');
    const locationItems = document.querySelectorAll('.location-item');

    console.log('Map container:', mapContainer);
    console.log('Container dimensions:', mapContainer?.offsetWidth, 'x', mapContainer?.offsetHeight);
    console.log('Location items:', locationItems.length);

    try {
        console.log('Checking google.maps...');
        if (typeof google === 'undefined') {
            throw new Error('Google is not defined');
        }
        if (typeof google.maps === 'undefined') {
            throw new Error('Google.maps is not defined');
        }
        console.log('✓ Google Maps API is available');

        // Create map
        console.log('Creating map instance...');
        googleMap = new google.maps.Map(mapContainer, {
            zoom: 4,
            center: { lat: 39.8283, lng: -98.5795 }, // Center of USA
            mapTypeControl: true,
            streetViewControl: true,
            fullscreenControl: true,
            styles: [
                {
                    featureType: 'poi',
                    elementType: 'labels',
                    stylers: [{ visibility: 'off' }]
                }
            ]
        });
        console.log('✓ Map instance created:', googleMap);

        // Create bounds for auto-centering
        const bounds = new google.maps.LatLngBounds();

        // Clear previous markers and info windows
        googleMapMarkers = [];
        googleMapInfoWindows = [];

        // Add markers
        console.log('Adding markers for', propertyLocations.length, 'locations...');
        propertyLocations.forEach((location, index) => {
            const position = { lat: location.lat, lng: location.lng };
            console.log(`Creating marker ${index + 1} for ${location.name} at`, position);

            // Create marker with custom icon
            const marker = new google.maps.Marker({
                position: position,
                map: googleMap,
                title: location.name,
                icon: {
                    url: createCustomMarker(index + 1),
                    scaledSize: new google.maps.Size(40, 50),
                    anchor: new google.maps.Point(20, 50)
                },
                animation: google.maps.Animation.DROP
            });

            // Create info window
            const infoWindow = new google.maps.InfoWindow({
                content: createInfoWindowContent(location)
            });

            // Add click listener to marker
            marker.addListener('click', () => {
                closeAllInfoWindows();
                infoWindow.open(googleMap, marker);
                highlightLocation(location.id, locationItems);
            });

            // Store marker and info window
            googleMapMarkers.push(marker);
            googleMapInfoWindows.push(infoWindow);

            // Extend bounds
            bounds.extend(position);
        });

        console.log('✓ Created', googleMapMarkers.length, 'markers');

        // Auto-center map to fit all markers
        console.log('Fitting bounds to show all markers...');
        googleMap.fitBounds(bounds);
        console.log('✓ Bounds fitted');

        // Setup legend interactions
        locationItems.forEach((item, index) => {
            item.addEventListener('click', function() {
                const locationId = this.dataset.location;
                const locationIndex = propertyLocations.findIndex(loc => loc.id === locationId);

                if (locationIndex !== -1) {
                    const location = propertyLocations[locationIndex];
                    const marker = googleMapMarkers[locationIndex];
                    const infoWindow = googleMapInfoWindows[locationIndex];

                    // Pan to location
                    googleMap.setCenter({ lat: location.lat, lng: location.lng });
                    googleMap.setZoom(12);

                    // Close all and open selected
                    closeAllInfoWindows();
                    infoWindow.open(googleMap, marker);

                    // Add bounce animation
                    marker.setAnimation(google.maps.Animation.BOUNCE);
                    setTimeout(() => marker.setAnimation(null), 2100);

                    highlightLocation(locationId, locationItems);
                }
            });
        });

        console.log('=== ✓ GOOGLE MAP CREATED SUCCESSFULLY ===');
        console.log('Total markers:', googleMapMarkers.length);
        console.log('Map object:', googleMap);

    } catch (error) {
        console.error('=== ✗ ERROR CREATING GOOGLE MAP ===');
        console.error('Error details:', error);
        console.error('Stack trace:', error.stack);
        showMapError(mapContainer);
    }
}

// Show error message
function showMapError(mapContainer) {
    mapContainer.innerHTML = `
        <div style="
            width: 100%;
            height: 100%;
            background: linear-gradient(135deg, #ef4444 0%, #dc2626 100%);
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            color: white;
            text-align: center;
            font-family: 'Montserrat', sans-serif;
            padding: 40px 20px;
        ">
            <div style="background: rgba(255,255,255,0.1); padding: 30px; border-radius: 15px; backdrop-filter: blur(10px); max-width: 500px;">
                <svg style="width: 64px; height: 64px; margin-bottom: 20px;" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                          d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z"/>
                </svg>
                <h3 style="margin: 0 0 15px 0; font-size: 1.5rem;">Unable to Load Map</h3>
                <p style="margin: 0 0 20px 0; opacity: 0.9;">
                    The Google Maps API could not be loaded. Please check your API key configuration in the .env file.
                </p>
                <p style="margin: 0; font-size: 0.9rem; opacity: 0.7;">
                    Error: Missing or invalid API key<br/>
                    See console for more details
                </p>
            </div>
        </div>
    `;
}



// Filter properties by location
function filterPropertiesByLocation(locationId) {
    const locationSelect = document.getElementById('location');
    if (locationSelect) {
        locationSelect.value = locationId;
        locationSelect.dispatchEvent(new Event('change'));
    }
}

function highlightLocation(location, locationItems) {
    // Remove active class from all items
    locationItems.forEach(item => item.classList.remove('active'));

    // Add active class to selected item
    const targetItem = document.querySelector(`[data-location="${location}"]`);
    if (targetItem) {
        targetItem.classList.add('active');
    }
}

// Export for potential use in other files
window.PropertiesPage = {
    openPropertyDetails,
    scheduleTour,
    initializePropertyMap,
    filterPropertiesByLocation,
    debugMap: function() {
        console.log('=== MAP DEBUG INFO ===');
        console.log('Google Maps available:', typeof google !== 'undefined' && !!google.maps);
        console.log('Map container exists:', !!document.getElementById('properties-map'));
        console.log('Map container dimensions:',
            document.getElementById('properties-map')?.getBoundingClientRect());
        console.log('Location items count:',
            document.querySelectorAll('.location-item').length);
        console.log('Markers count:', googleMapMarkers.length);
        console.log('Attempting to reinitialize map...');
        initializePropertyMap();
    }
};